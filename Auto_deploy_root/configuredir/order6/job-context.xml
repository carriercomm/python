<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 保险逾期校验JOB -->
    <bean id="overdueInsuranceAppValidationJob"
          class="com.baoxian.order.service.job.biz.OverdueInsuranceAppValidationJob"/>
    <!-- 设定逾期校验JOB的代理明细 -->
    <bean id="overdueInsuranceAppValidationJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="overdueInsuranceAppValidationJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="false"/>
    </bean>
    <!-- 设定逾期校验JOB触发明细 -->
    <bean id="overdueInsuranceAppValidationTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="overdueInsuranceAppValidationJobInvoker"/>
        <property name="cronExpression" value="0 0 * * * ?"/>
        <!--<property name="cronExpression" value="15/10 * * * * ?"/>-->
    </bean>

    <!-- 获取远程打单网点数据JOB -->
    <bean id="remotePrintingOrganizationProviderJob" class="com.baoxian.order.service.job.biz.RemotePrintingOrganizationProviderJob"/>
    <!-- 获取远程打单网点数据明细 -->
    <bean id="remotePrintingOrganizationProviderJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="remotePrintingOrganizationProviderJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="true"/>
    </bean>
    <!-- 获取远程打单网点数据JOB触发明细 -->
    <bean id="remotePrintingOrganizationProviderTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="remotePrintingOrganizationProviderJobInvoker"/>
        <!-- 以毫秒为单位，启动后一分钟触发 -->
        <property name="startDelay">
            <value>1000</value>
        </property>
        <!-- 每间隔2分钟触发一次 -->
        <property name="repeatInterval">
            <value>60000</value>
        </property>
    </bean>

    <!-- Jira任务重发JOB -->
    <bean id="jiraTaskInfoRetransmissionJob" class="com.baoxian.order.service.job.sys.JiraTaskInfoRetransmissionJob"/>
    <!-- 设定Jira任务重发JOB的代理明细 -->
    <bean id="jiraTaskInfoRetransmissionJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="jiraTaskInfoRetransmissionJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="true"/>
    </bean>
    <!-- 设定Jira任务重发JOB触发明细 -->
    <bean id="jiraTaskInfoRetransmissionTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="jiraTaskInfoRetransmissionJobInvoker"/>
        <!-- 以毫秒为单位，启动后一分钟触发 -->
        <property name="startDelay">
            <value>120000</value>
        </property>
        <!-- 每间隔2分钟触发一次 -->
        <property name="repeatInterval">
            <value>120000</value>
        </property>
    </bean>

    <!-- Jira支付任务支付成功确认JOB -->
    <bean id="paySuccessConfirmJob" class="com.baoxian.order.service.job.jira.PaySuccessConfirmJob"/>
    <!-- 设定Jira支付任务支付成功确认的代理明细 -->
    <bean id="paySuccessConfirmJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="paySuccessConfirmJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="true"/>
    </bean>
    <!-- 设定Jira支付任务支付成功确认触发明细 -->
    <bean id="paySuccessConfirmJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="paySuccessConfirmJobInvoker"/>
        <!-- 以毫秒为单位，启动后一分钟触发 -->
        <property name="startDelay">
            <value>120000</value>
        </property>
        <!-- 每间隔2分钟触发一次 -->
        <property name="repeatInterval">
            <value>120000</value>
        </property>
    </bean>

    <!-- Jira二次支付任务支付成功确认JOB -->
    <bean id="secondPaySuccessConfirmJob" class="com.baoxian.order.service.job.jira.SecondPaySuccessConfirmJob"/>
    <!-- 设定Jira二次支付任务支付成功确认的代理明细 -->
    <bean id="secondPaySuccessConfirmJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="secondPaySuccessConfirmJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="true"/>
    </bean>
    <!-- 设定Jira二次支付任务支付成功确认触发明细 -->
    <bean id="secondPaySuccessConfirmJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="secondPaySuccessConfirmJobInvoker"/>
        <!-- 以毫秒为单位，启动后一分钟触发 -->
        <property name="startDelay">
            <value>120000</value>
        </property>
        <!-- 每间隔2分钟触发一次 -->
        <property name="repeatInterval">
            <value>120000</value>
        </property>
    </bean>



    <!-- Jira配送任务配送成功确认JOB -->
    <bean id="deliverySuccessConfirmJob" class="com.baoxian.order.service.job.jira.DeliverySuccessConfirmJob"/>
    <!-- 设定Jira配送任务配送成功成功确认的代理明细 -->
    <bean id="deliverySuccessConfirmJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="deliverySuccessConfirmJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="true"/>
    </bean>
    <!-- 设定Jira配送任务配送成功确认触发明细 -->
    <bean id="deliverySuccessConfirmJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="deliverySuccessConfirmJobInvoker"/>
        <!-- 以毫秒为单位，启动后一分钟触发 -->
        <property name="startDelay">
            <value>120000</value>
        </property>
        <!-- 每间隔4分钟触发一次 -->
        <property name="repeatInterval">
            <value>120000</value>
        </property>
    </bean>

    <!-- Jira配送任务开始配送确认JOB -->
    <bean id="deliveryStartedConfirmJob" class="com.baoxian.order.service.job.jira.DeliveryStartedConfirmJob"/>
    <!-- 设定Jira配送任务开始配送确认的代理明细 -->
    <bean id="deliveryStartedConfirmJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="deliveryStartedConfirmJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="true"/>
    </bean>
    <!-- 设定Jira配送任务开始配送确认触发明细 -->
    <bean id="deliveryStartedConfirmJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="deliveryStartedConfirmJobInvoker"/>
        <!-- 以毫秒为单位，启动后2分钟触发 -->
        <property name="startDelay">
            <value>120000</value>
        </property>
        <!-- 每间隔2分钟触发一次 -->
        <property name="repeatInterval">
            <value>120000</value>
        </property>
    </bean>

    <!-- Jira承保任务承保成功确认JOB -->
    <bean id="underwriteSuccessConfirmJob" class="com.baoxian.order.service.job.jira.UnderwriteSuccessConfirmJob"/>
    <!-- 设定Jira承保任务承保成功确认JOB的代理明细 -->
    <bean id="underwriteSuccessConfirmJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="underwriteSuccessConfirmJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="true"/>
    </bean>
    <!-- 设定Jira承保任务承保成功确认JOB触发明细 -->
    <bean id="underwriteSuccessConfirmJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="underwriteSuccessConfirmJobInvoker"/>
        <!-- 以毫秒为单位，启动后2分钟触发 -->
        <property name="startDelay">
            <value>120000</value>
        </property>
        <!-- 每间隔2分钟触发一次 -->
        <property name="repeatInterval">
            <value>120000</value>
        </property>
    </bean>

    <!-- Jira打单任务打单成功确认JOB -->
    <bean id="InsPolicyPrintingTaskJob" class="com.baoxian.order.service.job.jira.InsPolicyPrintingTaskJob"/>

    <!-- 设定Jira打单任务打单成功确认JOB的代理明细 -->
    <bean id="printingSuccessConfirmJobInvoker"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 目标JOB -->
        <property name="targetObject" ref="InsPolicyPrintingTaskJob"/>
        <!--目标方法-->
        <property name="targetMethod" value="execute"/>
        <!--设置是否同步-->
        <property name="concurrent" value="true"/>
    </bean>

    <!-- 设定Jira打单任务打单成功确认JOB触发明细 -->
    <bean id="printingConfirmJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="printingSuccessConfirmJobInvoker"/>
        <!-- 以毫秒为单位，启动后2分钟触发 -->
        <property name="startDelay">
            <value>120000</value>
        </property>
        <!-- 每间隔2分钟触发一次 -->
        <property name="repeatInterval">
            <value>120000</value>
        </property>
    </bean>

    <!-- 配置调度工厂 -->
    <bean id="schedulerFactory" lazy-init="false" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!-- 注入需要启动JOB的触发器 -->
        <property name="triggers">
            <list>
                <!--<ref local="overdueInsuranceAppValidationTrigger"/>-->
                <ref local="jiraTaskInfoRetransmissionTrigger"/>
                <ref local="paySuccessConfirmJobTrigger"/>
                <!--<ref local="deliverySuccessConfirmJobTrigger"/>-->
                <!--<ref local="deliveryStartedConfirmJobTrigger"/>-->
                <ref local="underwriteSuccessConfirmJobTrigger"/>
                <ref local="secondPaySuccessConfirmJobTrigger"/>
                <ref local="printingConfirmJobTrigger"/>
                <ref local="remotePrintingOrganizationProviderTrigger"/>
            </list>
        </property>
        <!-- 控制JOB是否在应用启动时就运行 -->
        <property name="autoStartup" value="true"/>
    </bean>
</beans>